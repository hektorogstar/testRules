{
  "name": "MailerScript",
  "rule": "import edu.usf.cims.emailer.EmailerEngine\n\ndef maileng = new EmailerEngine()\ndef config = new ConfigObject()\ndef mergeData = []\ndef gid = row['gid']\ndef sponsorId = row['vipid']\ndef mergeDataQuery = \"\"\"select \ngmv.gid AS gid,\ngmv.fname AS fname,\ngmv.lname AS lname,\ngmv.created_vipid AS created_vipid,\ngmv.created_dt AS created_dt,\ndate(gmv.expiration_dt) AS expiration_dt,\ngmv.email AS email\nfrom \n\t(select vgm.gid,vgm.vipid,n.fname,n.lname,vgm.created_vipid,vgm.created_dt,vgm.expiration_dt,n.maildrop AS email\n\t from \n\t vip_group_member vgm LEFT JOIN \n\t names n on (n.badge=vgm.vipid)  \n\t UNION \n\t select gm.gid,gm.vipid,v.fname,v.lname,gm.created_vipid,gm.created_dt,gm.expiration_dt,v.email AS email\n\t from \n\t vip_group_member gm LEFT JOIN \n\t vip v ON (v.vipid=gm.vipid) \n\t WHERE (v.fname IS NOT NULL and v.lname IS NOT NULL)\n\t) gmv LEFT JOIN\n\tvip_group g ON (g.gid=gmv.gid)\n\tWHERE\ng.gid = ${gid}\nand gmv.created_vipid=${sponsorId}\"\"\"\n\ndef groupName = sqls.nams.rows(\"\"\"select label from vip_group where gid=${gid}\"\"\").label[0]\ndef sponsorEmail = sqls.nams.rows(\"\"\"select maildrop as email from names where badge=${sponsorId}\"\"\").email[0]\ndef sponsorName = sqls.nams.rows(\"\"\"select concat(fname,' ',lname) as fullname from names where badge=${sponsorId}\"\"\").fullname[0]\ndef dayCount = -1\ndef diagnostics = \"\"\ndef mdata = []\n\n\nif ( dayCount > 0 ) {\n\tmergeDataQuery += \"\"\"\nand gmv.expiration_dt < date(now() + interval ${dayCount} day)\nand gmv.expiration_dt > date(now())\"\"\"\n} else {\n\tmergeDataQuery += \"\"\"\nand gmv.expiration_dt < now()\"\"\"\n}\n\n\tmergeData += sqls.nams.rows(mergeDataQuery)\n\ndef mdataSize= mergeData.size()\nif (mdataSize>0) {\n\n\tengine = new groovy.text.GStringTemplateEngine()\n\n\tdef recipient = 'chance@mail.usf.edu'\n\t\n\tconfig.put('fromAddr', 'testmailer@rules-test-1.it.usf.edu')\n\tconfig.put('recipient', recipient)\n\t//def r1 = 'chancegray@gmail.com'\n\t//def r2 = 'hektorogstar@gmail.com'\n\t//def r1 = 'chance@mail.usf.edu'\n\t//config.put('bccfield', r1)\n\t//config.put('ccfield', r2)\n\tdiagnostics+=row\n\tdiagnostics+=[sponsorId : sponsorId]\n\tdiagnostics+=[sponsorEmail : sponsorEmail]\n\tdiagnostics+=[diagEmail : recipient]\n\tdiagnostics+=[mdataSize : mdataSize]\n\t\n\tconfig.put('recipientHdr', 'email')\n\t\n\tconfig.put('mail.smtp.host','bumblebee.forest.usf.edu')\n\t\n\tif ( dayCount > 0 ) {\n\t\t//def fquery = sqls.staging.rows(\"select template from templates where name='vipWarningTemplate'\")\n\t\t//def text = fquery.template[0]\n\t\tdef text = row['warningTemplate']\n\t\tmergeData.each() { mergeDataRow ->\n\t\t\tdef templateData = [ groupName: groupName, sponsorName: sponsorName, diagData: diagnostics, templateData: [mergeDataRow] ]\n\t\t\tconfig.put('subject', \"VIP affiliation for ${mergeDataRow.fname} ${mergeDataRow.lname} expiring soon\")\n\t\t\ttemplate = engine.createTemplate(text).make(templateData).toString()\n\t\t\tmailtext= maileng.runTemplate(text,templateData)\n\t\t\tmaileng.sendEmail(config,template)\n\t\t}\n\t} else {\n\t\tconfig.put('subject', 'VIP affiliation expired')\n\n\t\t//def fquery = sqls.staging.rows(\"select template from templates where name='vipExpiredTemplate'\")\n\t\t//def text = fquery.template[0]\n\t\tdef text = row['expiredTemplate']\n\n\t\tdef templateData = [ groupName: groupName, sponsorName: sponsorName, diagData: diagnostics, templateData: mergeData ]\n\t\t\n\t\ttemplate = engine.createTemplate(text).make(templateData).toString()\n\t\tmailtext= maileng.runTemplate(text,templateData)\n\t\tmaileng.sendEmail(config,template)\n\t}\n}",
  "class": "edu.usf.RuleChains.Groovy"
}