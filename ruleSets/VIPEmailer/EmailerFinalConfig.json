{
  "name": "EmailerFinalConfig",
  "rule": "def diagnostics = \"\"\ndef mergeData = []\ndef resultSet = []\ndef expireSet = []\ndef ccfield = []\ndef bccfield = []\nsenderEmail = 'testmailer@rules-test-1.it.usf.edu'\ndiag = 0\n\ngid = row['gid']\nsponsorId = row['vipid']\nmergeDataQuery = row['mergeDataQuery']\ngroupName = sqls.nams.rows(\"\"\"select label from vip_group where gid=${gid}\"\"\").label[0]\nif (diag==1) {\n\tsponsorEmail = 'chance@mail.usf.edu'\n\tbccfield += 'chancegray@gmail.com'\n\tbccfield += 'hektorogstar@gmail.com'\n} else {\n\tsponsorEmail = sqls.nams.rows(\"\"\"select maildrop as email from names where badge=${sponsorId}\"\"\").email[0]\n\tbccfield += 'cims-audit@mail.usf.edu'\n}\nsponsorName = sqls.nams.rows(\"\"\"select concat(fname,' ',lname) as fullname \n\t\t\t\t\t\t\t\tfrom names where badge=${sponsorId}\"\"\").fullname[0]\n\n\nmergeData += sqls.nams.rows(mergeDataQuery)\n\ndiagnostics+=row\ndiagnostics+=[sponsorId : sponsorId]\ndiagnostics+=[sponsorEmail : sponsorEmail]\n\nmergeData.each() { mergeDataRow ->\n\tswitch (mergeDataRow['status']) {\n\t\tcase 'Warn':\n\t\t\ttemplate = row['warningTemplate']\n\t\t\temailSubject = \"VIP affiliation for ${mergeDataRow.fname} ${mergeDataRow.lname} expiring soon\"\n\t\t\ttemplateData = [ groupName: groupName, \n\t\t\t\t\t\t\tsponsorName: sponsorName, \n\t\t\t\t\t\t\tdiagData: diagnostics, \n\t\t\t\t\t\t\ttemplateData: [mergeDataRow] ]\n\t\t\tresultSet += [ ccfield: ccfield, \n\t\t\t\t\t\t  bccfield: bccfield, \n\t\t\t\t\t\t  sender: senderEmail, \n\t\t\t\t\t\t  recipient: sponsorEmail, \n\t\t\t\t\t\t  subject: emailSubject, \n\t\t\t\t\t\t  templateText: template, \n\t\t\t\t\t\t  templateData: templateData ]\n\t\n\t\t\tbreak\n\t\tcase 'Expire':\n\t\t\texpireSet += [mergeDataRow]\n\t\t\tbreak\n\t\tdefault:\n\t\t\ttemplate = \"legit\"\n\t}\n\n}\n\nif (expireSet.size() > 0) {\n\ttemplate = row['expiredTemplate']\n\temailSubject = \"VIP affiliation expired\"\n\ttemplateData = [ groupName: groupName, \n\t\t\t\t\tsponsorName: sponsorName, \n\t\t\t\t\tdiagData: diagnostics, \n\t\t\t\t\ttemplateData: expireSet ]\n\tresultSet += [ ccfield: ccfield,\n\t\t\t\t  bccfield: bccfield,\n\t\t\t\t  sender: senderEmail,\n\t\t\t\t  recipient: sponsorEmail,\n\t\t\t\t  subject: emailSubject,\n\t\t\t\t  templateText: template,\n\t\t\t\t  templateData: templateData ]\n}\n\t\t\t\nreturn resultSet\n",
  "class": "edu.usf.RuleChains.Groovy"
}